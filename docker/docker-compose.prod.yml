version: '3.8'

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
    internal: true
  database:
    driver: bridge
    internal: true

volumes:
  postgres_data:
  redis_data:
  uploads:

secrets:
  db_password:
    file: ../secrets/db_password.txt
  jwt_secret:
    file: ../secrets/jwt_secret.txt

services:
  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../infrastructure/nginx/conf:/etc/nginx/conf.d
      - ../infrastructure/nginx/certs:/etc/nginx/certs
    depends_on:
      - frontend
      - backend
    networks:
      - frontend
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=64m
      - /var/cache/nginx:noexec,nosuid,size=64m
      - /var/run:noexec,nosuid,size=64m
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SvelteKit Frontend
  frontend:
    build:
      context: ../services/frontend
      target: production
    environment:
      - NODE_ENV=production
      - VITE_API_URL=http://backend:8000
      - VITE_WS_URL=ws://backend:8000
    networks:
      - frontend
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=32m
    user: "1000:1000"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node.js Backend API
  backend:
    build:
      context: ../services/backend
      target: production
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://app_user@postgres:5432/boarding_house
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_FILE=/run/secrets/jwt_secret
      - DB_PASSWORD_FILE=/run/secrets/db_password
      - PORT=8000
    secrets:
      - db_password
      - jwt_secret
    depends_on:
      - postgres
      - redis
    networks:
      - frontend
      - backend
      - database
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=128m
    user: "1000:1000"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: boarding_house
      POSTGRES_USER: app_user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    secrets:
      - db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../services/database/init:/docker-entrypoint-initdb.d
    networks:
      - database
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETUID
      - SETGID
      - DAC_OVERRIDE
    user: "999:999"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app_user -d boarding_house"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-production_redis_pass}
    volumes:
      - redis_data:/data
    networks:
      - backend
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    user: "999:999"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backup Service
  backup:
    image: postgres:16-alpine
    depends_on:
      - postgres
    volumes:
      - ../backups:/backups
    environment:
      PGHOST: postgres
      PGDATABASE: boarding_house
      PGUSER: app_user
      PGPASSWORD_FILE: /run/secrets/db_password
    secrets:
      - db_password
    networks:
      - database
    command: |
      sh -c '
        while true; do
          pg_dump -h postgres -U app_user boarding_house | gzip > /backups/backup-$$(date +%Y%m%d_%H%M%S).sql.gz
          find /backups -name "backup-*.sql.gz" -mtime +7 -delete
          sleep 86400
        done
      '
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
